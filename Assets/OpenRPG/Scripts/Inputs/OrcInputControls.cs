//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/OpenRPG/Scripts/Inputs/OrcInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ORC
{
    public partial class @OrcInputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @OrcInputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""OrcInputControls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""0d62271e-0da1-4638-b7f0-405be8065ced"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""b6ced3e4-cf07-48c2-8c8e-9179d3bdf05c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8380a656-7c6f-4218-83ad-b1f8993c8097"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerContact"",
                    ""type"": ""Button"",
                    ""id"": ""3fcf6c43-7159-4ef5-9ac0-54ced3e41d9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d2ba0c8-5568-4f15-8f75-db915bef66bd"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64d98b44-afdc-4d62-ab16-5e8d4c745a55"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cf57857-983b-4d09-8f9e-d70214de8669"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""aaf213b1-4ccc-41c9-a712-8bd4d910f0b5"",
            ""actions"": [
                {
                    ""name"": ""ScrollZoom"",
                    ""type"": ""Value"",
                    ""id"": ""41a18ba4-f4bb-422f-bfe4-c5efd9134cba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""16798031-cb9c-4bd8-92a9-6b62618e3b77"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_PrimaryFingerPosition = m_Touch.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
            m_Touch_SecondaryFingerPosition = m_Touch.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
            m_Touch_SecondaryFingerContact = m_Touch.FindAction("SecondaryFingerContact", throwIfNotFound: true);
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_ScrollZoom = m_Keyboard.FindAction("ScrollZoom", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
        private readonly InputAction m_Touch_PrimaryFingerPosition;
        private readonly InputAction m_Touch_SecondaryFingerPosition;
        private readonly InputAction m_Touch_SecondaryFingerContact;
        public struct TouchActions
        {
            private @OrcInputControls m_Wrapper;
            public TouchActions(@OrcInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryFingerPosition => m_Wrapper.m_Touch_PrimaryFingerPosition;
            public InputAction @SecondaryFingerPosition => m_Wrapper.m_Touch_SecondaryFingerPosition;
            public InputAction @SecondaryFingerContact => m_Wrapper.m_Touch_SecondaryFingerContact;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void AddCallbacks(ITouchActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
                @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
                @SecondaryFingerContact.started += instance.OnSecondaryFingerContact;
                @SecondaryFingerContact.performed += instance.OnSecondaryFingerContact;
                @SecondaryFingerContact.canceled += instance.OnSecondaryFingerContact;
            }

            private void UnregisterCallbacks(ITouchActions instance)
            {
                @PrimaryFingerPosition.started -= instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed -= instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled -= instance.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started -= instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed -= instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled -= instance.OnSecondaryFingerPosition;
                @SecondaryFingerContact.started -= instance.OnSecondaryFingerContact;
                @SecondaryFingerContact.performed -= instance.OnSecondaryFingerContact;
                @SecondaryFingerContact.canceled -= instance.OnSecondaryFingerContact;
            }

            public void RemoveCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchActions @Touch => new TouchActions(this);

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
        private readonly InputAction m_Keyboard_ScrollZoom;
        public struct KeyboardActions
        {
            private @OrcInputControls m_Wrapper;
            public KeyboardActions(@OrcInputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @ScrollZoom => m_Wrapper.m_Keyboard_ScrollZoom;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
                @ScrollZoom.started += instance.OnScrollZoom;
                @ScrollZoom.performed += instance.OnScrollZoom;
                @ScrollZoom.canceled += instance.OnScrollZoom;
            }

            private void UnregisterCallbacks(IKeyboardActions instance)
            {
                @ScrollZoom.started -= instance.OnScrollZoom;
                @ScrollZoom.performed -= instance.OnScrollZoom;
                @ScrollZoom.canceled -= instance.OnScrollZoom;
            }

            public void RemoveCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);
        public interface ITouchActions
        {
            void OnPrimaryFingerPosition(InputAction.CallbackContext context);
            void OnSecondaryFingerPosition(InputAction.CallbackContext context);
            void OnSecondaryFingerContact(InputAction.CallbackContext context);
        }
        public interface IKeyboardActions
        {
            void OnScrollZoom(InputAction.CallbackContext context);
        }
    }
}
